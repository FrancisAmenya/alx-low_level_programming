/**
 * pop_listint - Remove node from top
 *
 *@head: pointer to head node
 *
 * Return: int
 */

int pop_listint(listint_t **head)
{
	int index = 0;
	listint_t *new_node = *head;

	if (new_node)
	{
		index = new_node->n;
		*head = new_node->next;
	}
	free(new_node);
	return (index);
}65;6003;1c#ifndef LISTS_H
#define LISTS_H

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

/**
 * struct listint_s - a  singly linked list
 * @n: an integer
 * @next: it points to the next node
 *
 * Description: singly linked list node structure
 * for ALXSE
 */

typedef struct listint_s
{
	int n;
	struct listint_s *next;
} listint_t;

/*Advanced tasks function prototypes stat*/
listint_t *reverse_listint(listint_t **head);

/* ends */

size_t print_listint(const listint_t *h);
size_t listint_len(const listint_t *h);
listint_t *add_nodeint(listint_t **head, const int n);
listint_t *add_nodeint_end(listint_t **head, const int n);
void free_listint(listint_t *head);
void free_listint2(listint_t **head);
int pop_listint(listint_t **head);
listint_t *get_nodeint_at_index(listint_t *head, unsigned int index);
int sum_listint(listint_t *head);
listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n);
int delete_nodeint_at_index(listint_t **head, unsigned int index);

#endif /*ifndef LISTS_H*/
